// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Portfolio_Strona.Models;
using System;

namespace Portfolio_Strona.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Portfolio_Strona.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AboutMe1");

                    b.Property<string>("AboutMe2");

                    b.Property<string>("Email");

                    b.Property<string>("Facebook");

                    b.Property<string>("GitHub");

                    b.Property<string>("LinkedIn");

                    b.Property<string>("Phone");

                    b.Property<string>("PictureUrl");

                    b.HasKey("ContactId");

                    b.ToTable("ContactMe");
                });

            modelBuilder.Entity("Portfolio_Strona.Models.Literature", b =>
                {
                    b.Property<int>("LiteratureID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Authors");

                    b.Property<string>("Title");

                    b.Property<string>("Url");

                    b.HasKey("LiteratureID");

                    b.ToTable("Literatures");
                });

            modelBuilder.Entity("Portfolio_Strona.Models.LiteratureTechnology", b =>
                {
                    b.Property<int>("LiteratureID");

                    b.Property<int>("TechnologyID");

                    b.HasKey("LiteratureID", "TechnologyID");

                    b.HasIndex("TechnologyID");

                    b.ToTable("LiteraturesTech");
                });

            modelBuilder.Entity("Portfolio_Strona.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackColor");

                    b.Property<string>("Comments");

                    b.Property<DateTime>("CompletionDate");

                    b.Property<string>("GitHubUrl");

                    b.Property<string>("Name");

                    b.Property<string>("PictureUrl");

                    b.Property<string>("WebUrl");

                    b.Property<string>("WorkLogUrl");

                    b.Property<string>("YouTubeUrl");

                    b.HasKey("ProjectID");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Portfolio_Strona.Models.Survey", b =>
                {
                    b.Property<int>("SurveyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Change");

                    b.Property<string>("Name");

                    b.Property<string>("Opinion");

                    b.Property<DateTime>("Time");

                    b.HasKey("SurveyID");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("Portfolio_Strona.Models.Technology", b =>
                {
                    b.Property<int>("TechnologyID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PictureLink")
                        .IsRequired();

                    b.HasKey("TechnologyID");

                    b.ToTable("Technologies");
                });

            modelBuilder.Entity("Portfolio_Strona.Models.TechnologyProject", b =>
                {
                    b.Property<int>("TechnologyID");

                    b.Property<int>("ProjectID");

                    b.HasKey("TechnologyID", "ProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("TechProjects");
                });

            modelBuilder.Entity("Portfolio_Strona.Models.LiteratureTechnology", b =>
                {
                    b.HasOne("Portfolio_Strona.Models.Literature", "Literature")
                        .WithMany("LiteraturesTechnologies")
                        .HasForeignKey("LiteratureID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Portfolio_Strona.Models.Technology", "Technology")
                        .WithMany("LiteraturesTechnologies")
                        .HasForeignKey("TechnologyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Portfolio_Strona.Models.TechnologyProject", b =>
                {
                    b.HasOne("Portfolio_Strona.Models.Project", "Project")
                        .WithMany("TechnologiesProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Portfolio_Strona.Models.Technology", "Technology")
                        .WithMany("TechnologiesProjects")
                        .HasForeignKey("TechnologyID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
